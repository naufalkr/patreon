{"remainingRequest":"D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\src\\components\\UploadVideoModal.vue?vue&type=style&index=0&id=e83ce2fa&scoped=true&lang=css&","dependencies":[{"path":"D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\src\\components\\UploadVideoModal.vue","mtime":1730691715870},{"path":"D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":1730447646010},{"path":"D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1730447648140},{"path":"D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\node_modules\\postcss-loader\\src\\index.js","mtime":1730447646049},{"path":"D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1730447647589},{"path":"D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1730447643917},{"path":"D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1730447647010}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi8qIEFkZCBhbnkgcmVxdWlyZWQgc3R5bGVzIGhlcmUgKi8NCg=="},{"version":3,"sources":["UploadVideoModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqTA","file":"UploadVideoModal.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <v-dialog\r\n    v-model=\"dialog\"\r\n    persistent\r\n    transition=\"fab-transition\"\r\n    max-width=\"1000\"\r\n  >\r\n    <v-card>\r\n      <div class=\"d-flex justify-space-between mb-5\" id=\"modal-header\">\r\n        <v-card-title class=\"py-3\">Upload Content</v-card-title>\r\n        <div class=\"mt-3 mr-2\">\r\n          <v-btn icon text @click=\"closeModal\">\r\n            <v-icon>mdi-close</v-icon>\r\n          </v-btn>\r\n        </div>\r\n      </div>\r\n\r\n      <v-card-text>\r\n        <ValidationObserver ref=\"form\" v-slot=\"{ invalid }\">\r\n          <form @submit.prevent=\"submit\">\r\n            <div class=\"text-center\">\r\n              <v-btn\r\n                icon\r\n                class=\"grey lighten-2 mb-4\"\r\n                style=\"height: 104px; width: 104px; background-color: #252525;\"\r\n                @click=\"selectFile\"\r\n              >\r\n                <v-icon x-large style=\"color: #ffffff;\">mdi-upload-outline</v-icon>\r\n              </v-btn>\r\n            </div>\r\n\r\n            <ValidationProvider\r\n              rules=\"required|size:5000\"\r\n              v-slot=\"{ errors }\"\r\n              name=\"file\"\r\n              ref=\"provider\"\r\n            >\r\n              <v-file-input\r\n                @change=\"uploadVideo\"\r\n                v-model=\"selectedFile\"\r\n                accept=\"video/mp4\"\r\n                placeholder=\"Pick a video\"\r\n                prepend-icon=\"mdi-attachment\"\r\n                ref=\"fileInput\"\r\n                style=\"color: #252525;\"          \r\n              ></v-file-input >\r\n              <span v-if=\"errors.length\" style=\"color: #252525;\">\r\n        {{ errors[0] }}\r\n      </span> \r\n            </ValidationProvider>\r\n\r\n            <v-progress-circular\r\n              v-if=\"uploading\"\r\n              :rotate=\"360\"\r\n              :size=\"100\"\r\n              :width=\"15\"\r\n              :value=\"value\"\r\n              color=\"#252525\"\r\n            >\r\n              {{ value }}\r\n            </v-progress-circular>\r\n\r\n            <div class=\"mt-6\">\r\n              <v-divider></v-divider>\r\n              <h3 class=\"mt-4\">Upload Image</h3>\r\n              <ValidationProvider\r\n                rules=\"required\"\r\n                name=\"Image\"\r\n              >\r\n                <v-file-input\r\n                  v-model=\"selectedImage\"\r\n                  accept=\"image/*\"\r\n                  placeholder=\"Pick an image\"\r\n                  prepend-icon=\"mdi-attachment\"\r\n                  class=\"mb-4\"\r\n                ></v-file-input>\r\n              </ValidationProvider>\r\n\r\n              <v-divider></v-divider>\r\n            </div>\r\n\r\n            <ValidationProvider\r\n              v-slot=\"{ errors }\"\r\n              name=\"Title\"\r\n              rules=\"required|min:3\"\r\n            >\r\n              <v-text-field\r\n                v-model=\"formData.title\"\r\n                :error-messages=\"errors\"\r\n                label=\"Add a title\"\r\n                class=\"mb-3\"\r\n                filled\r\n                dense\r\n                counter=\"100\"\r\n                max-length=\"100\"\r\n              ></v-text-field>\r\n            </ValidationProvider>\r\n\r\n            <ValidationProvider\r\n              v-slot=\"{ errors }\"\r\n              name=\"Description\"\r\n              rules=\"required|min:3\"\r\n            >\r\n              <v-textarea\r\n                filled\r\n                auto-grow\r\n                :error-messages=\"errors\"\r\n                placeholder=\"What're you thinking about?\"\r\n                rows=\"5\"\r\n                counter=\"5000\"\r\n                max-length=\"5000\"\r\n                v-model=\"formData.description\"\r\n                row-height=\"20\"\r\n              ></v-textarea>\r\n            </ValidationProvider>\r\n\r\n            <ValidationProvider\r\n              v-slot=\"{ errors }\"\r\n              name=\"Visibility\"\r\n              rules=\"required\"\r\n            >\r\n              <v-select\r\n                :items=\"visibilityOptions\"\r\n                :error-messages=\"errors\"\r\n                filled\r\n                label=\"Visibility\"\r\n                v-model=\"formData.visibility\"\r\n              ></v-select>\r\n            </ValidationProvider>\r\n\r\n            <ValidationProvider\r\n              v-slot=\"{ errors }\"\r\n              name=\"Category\"\r\n              rules=\"required\"\r\n            >\r\n              <v-select\r\n                :items=\"categoriesTitles\"\r\n                :error-messages=\"errors\"\r\n                filled\r\n                label=\"Membership Tier\"\r\n                v-model=\"formData.category\"\r\n                :loading=\"categoryLoading\"\r\n              ></v-select>\r\n            </ValidationProvider>\r\n\r\n            <div class=\"mt-6 d-flex justify-space-between\">\r\n              <v-btn\r\n                :loading=\"submitLoading\"\r\n                type=\"submit\"\r\n                class=\"primary\"\r\n                depressed\r\n                :disabled=\"invalid\"\r\n                style=\"background-color: #252525; color: #ffffff;\"\r\n              >Upload</v-btn>\r\n            </div>\r\n          </form>\r\n        </ValidationObserver>\r\n      </v-card-text>\r\n\r\n      <v-card-actions>\r\n\r\n      </v-card-actions>\r\n    </v-card>\r\n  </v-dialog>\r\n</template>\r\n\r\n<script>\r\n// import myUpload from \"vue-image-crop-upload\";\r\nimport VideoService from \"@/services/VideoService\";\r\nimport CategoryService from \"@/services/CategoryService\";\r\n\r\nexport default {\r\n  name: \"UploadModal\",\r\n  props: [\"openDialog\"],\r\n  data() {\r\n    return {\r\n      valid: false,\r\n      uploaded: false,\r\n      uploading: false,\r\n      submitLoading: false,\r\n      categoryLoading: false,\r\n      value: 0,\r\n      show: false,\r\n      categoriesTitles: [\"Basic\", \"Family\", \"Friend of The Show\", \"Part of the Show\"],\r\n      categories: [],\r\n      visibilityOptions: [\"Public\", \"Private\"],\r\n      selectedFile: null,\r\n      selectedImage: null,\r\n      uploadedText: \"\",\r\n      formData: {\r\n        id: \"\",\r\n        title: \"\",\r\n        description: \"\",\r\n        category: \"\",\r\n        visibility: \"\",\r\n      },\r\n      imgDataUrl: \"\",\r\n      url: \"\",\r\n      headers: { Authorization: `Bearer ${this.$store.getters.getToken}` },\r\n    };\r\n  },\r\n  computed: {\r\n    dialog() {\r\n      return this.openDialog;\r\n    },\r\n  },\r\n  methods: {\r\n    async uploadVideo(e) {\r\n      const { valid } = await this.$refs.provider.validate(e);\r\n      if (!valid) return;\r\n\r\n      this.uploading = true;\r\n      const fd = new FormData();\r\n      fd.append(\"video\", this.selectedFile, this.selectedFile.name);\r\n\r\n      let video = await VideoService.uploadVideo(fd, {\r\n        onUploadProgress: (uploadEvent) => {\r\n          this.value = Math.round((uploadEvent.loaded / uploadEvent.total) * 100);\r\n        },\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n      .finally(() => {\r\n        this.uploaded = true;\r\n        this.uploading = false;\r\n      });\r\n\r\n      if (!video) return;\r\n      video = video.data.data;\r\n\r\n      this.formData.id = video._id;\r\n      this.formData.title = video.title;\r\n      this.formData.description = video.description;\r\n      this.url = `${process.env.VUE_APP_URL}/api/v1/videos/${video._id}/thumbnails`;\r\n    },\r\n    async submit() {\r\n      if (!this.selectedImage || this.uploadedText.trim() === \"\") return;\r\n      this.submitLoading = true;\r\n\r\n      // Find the selected category ID\r\n      const selectedCategory = this.categories.find(\r\n        (category) => category.title === this.formData.category\r\n      );\r\n      if (selectedCategory) {\r\n        this.formData.category = selectedCategory._id;\r\n      }\r\n\r\n      const video = await VideoService.updateVideo(this.formData.id, {\r\n        title: this.formData.title,\r\n        description: this.formData.description,\r\n        categoryId: this.formData.category,\r\n        status: this.formData.visibility.toLowerCase(),\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n      .finally(() => {\r\n        this.submitLoading = false;\r\n        this.uploaded = false;\r\n        this.resetForm();\r\n      });\r\n\r\n      if (!video) return;\r\n\r\n      this.$router.push(`/studio/videos?${new Date()}`);\r\n    },\r\n    async getCategories() {\r\n      this.categoryLoading = true;\r\n      const categories = await CategoryService.getAll()\r\n        .catch((err) => {\r\n          console.log(err);\r\n        })\r\n        .finally(() => (this.categoryLoading = false));\r\n\r\n      this.categoriesTitles = categories.data.data.map((category) => category.title);\r\n      this.categories = categories.data.data;\r\n    },\r\n    closeModal() {\r\n      this.$emit(\"closeDialog\");\r\n    },\r\n    selectFile() {\r\n      this.$refs.fileInput.$refs.input.click();\r\n    },\r\n    resetForm() {\r\n      this.formData = {\r\n        id: \"\",\r\n        title: \"\",\r\n        description: \"\",\r\n        category: \"\",\r\n        visibility: \"\",\r\n      };\r\n      this.selectedFile = null;\r\n      this.selectedImage = null;\r\n      this.uploadedText = \"\";\r\n      this.imgDataUrl = \"\";\r\n      this.show = false;\r\n    },\r\n  },\r\n  components: {\r\n    // myUpload,\r\n  },\r\n  created() {\r\n    this.getCategories();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any required styles here */\r\n</style>\r\n"]}]}