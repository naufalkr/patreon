{"remainingRequest":"D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\src\\views\\Studio\\Details.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\src\\views\\Studio\\Details.vue","mtime":1730447401969},{"path":"D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":1730447646010},{"path":"D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1730447648140},{"path":"D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\node_modules\\postcss-loader\\src\\index.js","mtime":1730447646049},{"path":"D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1730447644413},{"path":"D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1730447647589},{"path":"D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1730447643917},{"path":"D:\\Kampus\\SEMESTER 5\\PBKK\\patreon-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1730447647010}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouY2FyZCB7DQogIGJhY2tncm91bmQ6ICNmOWY5ZjkgIWltcG9ydGFudDsNCn0NCg=="},{"version":3,"sources":["Details.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqOA;AACA;AACA","file":"Details.vue","sourceRoot":"src/views/Studio","sourcesContent":["<template>\r\n  <div id=\"video-details\" class=\"pa-4\">\r\n    <v-container>\r\n      <!-- <div class=\"d-flex justify-space-between mb-5\"> -->\r\n      <v-btn text small class=\"pl-0\" @click=\"$router.go(-1)\"\r\n        ><v-icon left>mdi-arrow-left</v-icon> Channel videos</v-btn\r\n      >\r\n      <h2 class=\"mt-5\">Video details</h2>\r\n      <v-row>\r\n        <v-col cols=\"8\">\r\n          <ValidationObserver ref=\"form\" v-slot=\"{ handleSubmit, reset }\">\r\n            <form @submit.prevent=\"handleSubmit(submit)\" @reset.prevent=\"reset\">\r\n              <ValidationProvider\r\n                v-slot=\"{ errors }\"\r\n                name=\"Title\"\r\n                rules=\"required|min:3\"\r\n              >\r\n                <v-text-field\r\n                  :loading=\"inputLoading\"\r\n                  v-model=\"formData.title\"\r\n                  :error-messages=\"errors\"\r\n                  label=\"Title (required)\"\r\n                  class=\"mb-3\"\r\n                  filled\r\n                  dense\r\n                  counter=\"100\"\r\n                  max-length=\"100\"\r\n                ></v-text-field>\r\n              </ValidationProvider>\r\n              <ValidationProvider\r\n                v-slot=\"{ errors }\"\r\n                name=\"Description\"\r\n                rules=\"required|min:3\"\r\n              >\r\n                <v-textarea\r\n                  :loading=\"inputLoading\"\r\n                  filled\r\n                  auto-grow\r\n                  :error-messages=\"errors\"\r\n                  label=\"Description\"\r\n                  placeholder=\"Tell viewers about your video\"\r\n                  rows=\"5\"\r\n                  counter=\"5000\"\r\n                  max-length=\"5000\"\r\n                  v-model=\"formData.description\"\r\n                  row-height=\"20\"\r\n                ></v-textarea>\r\n              </ValidationProvider>\r\n              <ValidationProvider\r\n                v-slot=\"{ errors }\"\r\n                name=\"Visibilty\"\r\n                rules=\"required|oneOf:private,public\"\r\n              >\r\n                <v-select\r\n                  :loading=\"inputLoading\"\r\n                  :items=\"visibility\"\r\n                  :error-messages=\"errors\"\r\n                  filled\r\n                  label=\"Visibilty\"\r\n                  :value=\"formData.visibility\"\r\n                  v-model=\"formData.visibility\"\r\n                ></v-select>\r\n              </ValidationProvider>\r\n              <ValidationProvider\r\n                v-slot=\"{ errors }\"\r\n                name=\"Cateogry\"\r\n                rules=\"required|min:3\"\r\n              >\r\n                <v-select\r\n                  :loading=\"categoryLoading\"\r\n                  :items=\"categoriesTitles\"\r\n                  :error-messages=\"errors\"\r\n                  filled\r\n                  label=\"Categories\"\r\n                  v-model=\"formData.category\"\r\n                ></v-select>\r\n              </ValidationProvider>\r\n\r\n              <div class=\"mt-6 d-flex justify-space-between\">\r\n                <v-btn\r\n                  :loading=\"submitLoading\"\r\n                  type=\"submit\"\r\n                  class=\"primary\"\r\n                  depressed\r\n                  >Submit</v-btn\r\n                >\r\n              </div>\r\n            </form>\r\n          </ValidationObserver>\r\n        </v-col>\r\n        <v-col cols=\"4\" class=\"text-center\">\r\n          <v-btn text @click=\"toggleShow\">Upload Thumbnails</v-btn>\r\n          <my-upload\r\n            field=\"thumbnail\"\r\n            @crop-success=\"cropSuccess\"\r\n            method=\"PUT\"\r\n            v-model=\"show\"\r\n            :width=\"1280\"\r\n            :height=\"720\"\r\n            :url=\"url\"\r\n            :headers=\"headers\"\r\n            img-format=\"jpg\"\r\n            langType=\"en\"\r\n          ></my-upload>\r\n          <v-responsive style=\"max-width: 100%\">\r\n            <div v-if=\"!imgDataUrl\" class=\"px-12\" id=\"image-placeholder\">\r\n              <v-icon>mdi-image-plus</v-icon>\r\n            </div>\r\n            <v-img v-else height=\"350\" :src=\"imgDataUrl\"></v-img>\r\n          </v-responsive>\r\n        </v-col>\r\n      </v-row>\r\n    </v-container>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport myUpload from 'vue-image-crop-upload'\r\nimport VideoService from '@/services/VideoService'\r\nimport CategoryService from '@/services/CategoryService'\r\n\r\nexport default {\r\n  name: 'Details',\r\n  data() {\r\n    return {\r\n      // dialog: this.openDialog ? this.openDialog : false,\r\n      inputLoading: false,\r\n      submitLoading: false,\r\n      categoryLoading: false,\r\n      value: 0,\r\n      show: false,\r\n      rules: [\r\n        (value) =>\r\n          !value ||\r\n          value.size < 5000000 ||\r\n          'Video size should be less than 5 MB!'\r\n      ],\r\n      categoriesTitles: [],\r\n      categories: [],\r\n      visibility: ['public', 'private'],\r\n      formData: {\r\n        title: '',\r\n        description: '',\r\n        category: '',\r\n        visibility: ''\r\n      },\r\n      // imgDataUrl: 'https://cdn.vuetifyjs.com/images/cards/docks.jpg',\r\n\r\n      imgDataUrl: '',\r\n      url: '',\r\n      headers: { Authorization: `Bearer ${this.$store.getters.getToken}` }\r\n    }\r\n  },\r\n  methods: {\r\n    async getVideo() {\r\n      this.inputLoading = true\r\n      let video = await VideoService.getById(this.$route.params.id)\r\n        .catch((err) => {\r\n          console.log(err)\r\n        })\r\n        .finally(() => {\r\n          this.inputLoading = false\r\n        })\r\n\r\n      if (!video) return\r\n      video = video.data.data\r\n      this.url = `${process.env.VUE_APP_URL}/api/v1/videos/${video._id}/thumbnails`\r\n\r\n      this.formData.title = video.title\r\n      this.formData.description = video.description\r\n      this.formData.visibility = video.status == 'draft' ? '' : video.status\r\n      this.formData.category = video.categoryId.title\r\n      this.imgDataUrl = `${process.env.VUE_APP_URL}/uploads/thumbnails/${video.thumbnailUrl}`\r\n    },\r\n    async submit() {\r\n      // if (this.$route.name === 'Dashboard')\r\n      this.submitLoading = true\r\n      this.formData.category = this.categories.find(\r\n        (category) => category.title === this.formData.category\r\n      )._id\r\n      const video = await VideoService.updateVideo(this.$route.params.id, {\r\n        title: this.formData.title,\r\n        description: this.formData.description,\r\n        categoryId: this.formData.category,\r\n        status: this.formData.visibility.toLowerCase()\r\n      })\r\n        .catch((err) => {\r\n          console.log(err)\r\n        })\r\n        .finally(() => (this.submitLoading = false))\r\n\r\n      if (!video) return\r\n\r\n      this.$router.push('/studio/videos')\r\n      // console.log('submittied')\r\n    },\r\n    async getCategories() {\r\n      this.categoryLoading = true\r\n      const categories = await CategoryService.getAll()\r\n        .catch((err) => {\r\n          console.log(err)\r\n        })\r\n        .finally(() => (this.categoryLoading = false))\r\n\r\n      this.categoriesTitles = categories.data.data.map((category) => {\r\n        return category.title\r\n      })\r\n      this.categories = categories.data.data\r\n    },\r\n    toggleShow() {\r\n      this.show = !this.show\r\n    },\r\n    cropSuccess(imgDataUrl, field) {\r\n      console.log('-------- crop success --------')\r\n      console.log(field)\r\n      this.imgDataUrl = imgDataUrl\r\n    }\r\n  },\r\n  components: {\r\n    myUpload\r\n  },\r\n  mounted() {\r\n    this.getVideo()\r\n    this.getCategories()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.card {\r\n  background: #f9f9f9 !important;\r\n}\r\n</style>\r\n"]}]}